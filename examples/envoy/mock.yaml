#docker run -d --name=ratelimit-envoy-mock-1 --volume=/home/lap14388/CLS/r8limiter/examples/envoy/mock.yaml:/etc/envoy/envoy.yaml:rw -p 9999:9999 --restart=always envoyproxy/envoy-dev:latest '--service-node mock' '--service-cluster mock' '--config-path /etc/envoy/envoy.yaml' '--concurrency 1' '--mode serve' '--log-level info'
static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 9999
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                upgrade_configs:
                  - upgrade_type: websocket
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        host:
                          hostname: "%HOSTNAME%"
                        http:
                          request:
                            body: "%DYNAMIC_METADATA(envoy.lua:request_body)%"
                            headers: "%DYNAMIC_METADATA(envoy.lua:request_headers)%"
                            duration: "%DURATION%"
                            duration_req: "%REQUEST_DURATION%"
                            method: "%REQ(:METHOD)%"
                            path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          response:
                            body: "%DYNAMIC_METADATA(envoy.lua:response_body)%"
                            headers: "%DYNAMIC_METADATA(envoy.lua:response_headers)%"
                            duration_resp: "%RESPONSE_DURATION%"
                            duration_tx: "%RESPONSE_TX_DURATION%"
                            flags: "%RESPONSE_FLAGS%"
                            server: "%RESP(SERVER)%"
                            status_code: "%RESPONSE_CODE%"
                            status_code_details: "%RESPONSE_CODE_DETAILS%"
                          version: "%PROTOCOL%"
                        log:
                          level: "info"
                        network:
                          direction: "inbound"
                        server:
                          address: "%UPSTREAM_HOST%"
                        service:
                          name: "envoy"
                          version: "1.23"
                        user_agent: "%REQ(USER-AGENT)%"
                codec_type: auto
                generate_request_id: true
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          direct_response:
                            status: "200"
                            body:
                              inline_string: "Hello World"
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          local headers = request_handle:headers()
                          local headersMap = {}
                          for key, value in pairs(headers) do
                            headersMap[key] = value
                          end                
                          request_handle:streamInfo():dynamicMetadata():set("envoy.lua","request_headers",headersMap)                    
                          local requestBody = ""
                          for chunk in request_handle:bodyChunks() do
                            if (chunk:length() > 0) then
                              requestBody = requestBody .. chunk:getBytes(0, chunk:length())
                            end
                          end
                          request_handle:streamInfo():dynamicMetadata():set("envoy.lua","request_body",requestBody)                    
                        end
                        function envoy_on_response(response_handle)
                          local headers = response_handle:headers()
                          local headersMap = {}
                          for key, value in pairs(headers) do
                            headersMap[key] = value
                          end                
                          response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_headers",headersMap)                    
                          local responseBody = ""
                          for chunk in response_handle:bodyChunks() do
                            if (chunk:length() > 0) then
                              responseBody = responseBody .. chunk:getBytes(0, chunk:length())
                            end
                          end
                          response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_body",responseBody)                    
                        end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
